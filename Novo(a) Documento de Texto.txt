#include <stdio.h>
#include <locale.h>

#define TAM 10   // numero maximo de cadastros

struct REG_PESSOA {
    int codigo;
    int excluido;         // 1 = ativo, 0 = excluido
    char nome[50];
};

void limpar() {
    char c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void inicializarLista(struct REG_PESSOA lista[]) {
    int i;
    for (i = 0; i < TAM; i++) {
        lista[i].excluido = 0;  // 0 = inativo/excluido
    }
}

// Funcao simples para ler apenas numeros inteiros
int lerInteiroSimples(const char *mensagem) {
    int valor;
    while (1) {
        printf("%s", mensagem);
        if (scanf("%d", &valor) == 1) { // leu um inteiro
            limpar();
            return valor;
        } else {
            printf("Entrada invalida! Digite apenas numeros.\n");
            limpar(); // limpa o buffer
        }
    }
}

int procurarCodigo(struct REG_PESSOA lista[], int codigo) {
    int i;
    for (i = 0; i < TAM; i++) {
        if (lista[i].excluido == 1 && lista[i].codigo == codigo) {
            return i;
        }
    }
    return -1;
}

int procurarEspaco(struct REG_PESSOA lista[]) {
    int i;
    for (i = 0; i < TAM; i++) {
        if (lista[i].excluido == 0) return i;
    }
    return -1;
}

void cadastro(struct REG_PESSOA lista[]) {
    int pos = procurarEspaco(lista);
    if (pos == -1) {
        printf("Limite de registros atingido! Exclua alguem primeiro.\n");
        return;
    }

    int codigo = lerInteiroSimples("Digite o codigo: ");
    if (procurarCodigo(lista, codigo) != -1) {
        printf("Codigo ja cadastrado!\n");
        return;
    }

    lista[pos].codigo = codigo;

    printf("Digite o nome: ");
    scanf("%49s", lista[pos].nome);
    limpar();

    lista[pos].excluido = 1; // marca como ativo
    printf("A pessoa foi cadastrada com sucesso!\n");
}

void excluirPessoa(struct REG_PESSOA lista[]) {
    int codigo = lerInteiroSimples("Digite o codigo para excluir: ");
    int pos = procurarCodigo(lista, codigo);

    if (pos == -1) {
        printf("Registro nao encontrado!\n");
        return;
    }

    printf("Nome: %s\n", lista[pos].nome);
    printf("Confirma exclusao? (S/N): ");
    char resposta = getchar();
    limpar();

    if (resposta == 'S' || resposta == 's') {
        lista[pos].excluido = 0;
        printf("O registro foi excluido!\n");
    } else {
        printf("Exclusao cancelada.\n");
    }
}

void relatorio(struct REG_PESSOA lista[]) {
    printf("+--------------------------+\n");
    printf("|   RELATORIO DE PESSOAS   |\n");
    printf("+--------------------------+\n");
    printf("| REGISTRO | CODIGO | NOME |\n");
    printf("+--------------------------+\n");

    int i;
    for (i = 0; i < TAM; i++) {
        if (lista[i].excluido == 1) {
            printf("%8d | %6d | %s\n", i + 1, lista[i].codigo, lista[i].nome);
        }
    }
}

void menu() {
    printf("\n+--------------------------+");
    printf("\n|           MENU           |");
    printf("\n+--------------------------+\n");
    printf("| 1 - CADASTRAR PESSOA     |\n");
    printf("| 2 - EXCLUIR PESSOA       |\n");
    printf("| 3 - RELATORIO            |\n");
    printf("| 4 - SAIR                 |");
    printf("\n+--------------------------+\n\n");
}

int main() {
    setlocale(LC_ALL, "Portuguese");

    struct REG_PESSOA lista[TAM];
    inicializarLista(lista);

    int opcao;
    do {
        menu();
        opcao = lerInteiroSimples("Escolha: ");

        switch (opcao) {
            case 1: cadastro(lista); break;
            case 2: excluirPessoa(lista); break;
            case 3: relatorio(lista); break;
            case 4: printf("Encerrando programa...\n"); break;
            default: printf("Opcao invalida! Tente novamente.\n");
        }

    } while (opcao != 4);

    return 0;
}
