#include <stdio.h>
#include <locale.h>

#define TAM 10   // numero maximo de cadastros

// Definicao da struct
struct REG_PESSOA {
    int codigo;
    int excluido;         // 1 = ativo, 0 = excluido
    char nome[50];
};

void limpar() {
    char c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void inicializarLista(struct REG_PESSOA lista[]) {
    int i;
    for (i = 0; i < TAM; i++) {
        lista[i].excluido = 0;  // 0 = inativo/excluido
    }
}

// Procura uma pessoa pelo codigo
int procurarCodigo(struct REG_PESSOA lista[], int codigo) {
    int i;
    for (i = 0; i < TAM; i++) {
        // Verifica se o registro esta ativo e se o codigo bate
        if (lista[i].excluido == 1 && lista[i].codigo == codigo) {
            return i;
        }
    }
    return -1; // nao encontrou
}

// Procura o primeiro espaco vazio (registro inativo)
int procurarEspaco(struct REG_PESSOA lista[]) {
    int i;
    for (i = 0; i < TAM; i++) {
        if (lista[i].excluido == 0) {
            return i;
        }
    }
    return -1;
}

// ---------------- FUNCOES PRINCIPAIS ---------------- //

// Cadastra uma nova pessoa
void cadastro(struct REG_PESSOA lista[]) {
    int pos = procurarEspaco(lista);

    if (pos == -1) {
        printf("Limite de registros atingido! Exclua alguem primeiro.\n");
        return;
    }

    int codigo;
    printf("Digite o codigo: ");
    scanf("%d", &codigo);
    limpar();

    if (procurarCodigo(lista, codigo) != -1) {
        printf("Codigo ja cadastrado!\n");
        return;
    }

    lista[pos].codigo = codigo;

    printf("Digite o nome: ");
    scanf("%49s", lista[pos].nome);
    limpar();

    lista[pos].excluido = 1; // marca como ativo
    printf("A pessoa foi cadastrada com sucesso!\n");
}

// Exclui uma pessoa pelo codigo
void excluirPessoa(struct REG_PESSOA lista[]) {
    int codigo;
    printf("Digite o codigo para excluir: ");
    scanf("%d", &codigo);
    limpar();

    int pos = procurarCodigo(lista, codigo);

    if (pos == -1) {
        printf("Registro nao encontrado!\n");
        return;
    }

    printf("Nome: %s\n", lista[pos].nome);
    printf("Confirma exclusao? (S/N): ");
    char resposta = getchar();
    limpar();

    if (resposta == 'S' || resposta == 's') {
        lista[pos].excluido = 0; // marca como inativo
        printf("O registro foi excluido!\n");
    } else {
        printf("Exclusao cancelada.\n");
    }
}

// Mostra todos os registros ativos
void relatorio(struct REG_PESSOA lista[]) {
    printf("+--------------------------+\n");
    printf("|   RELATORIO DE PESSOAS   |\n");
    printf("+--------------------------+\n");
    printf("| REGISTRO | CODIGO | NOME |\n");
    printf("+--------------------------+\n");

    int i;
    for (i = 0; i < TAM; i++) {
        if (lista[i].excluido == 1) {
            printf("%8d | %6d | %s\n", i + 1, lista[i].codigo, lista[i].nome);
        }
    }
}

// Mostra o menu principal
void menu() {
    printf("\n+--------------------------+");
    printf("\n|           MENU           |");
    printf("\n+--------------------------+\n");
    printf("| 1 - CADASTRAR PESSOA     |\n");
    printf("| 2 - EXCLUIR PESSOA       |\n");
    printf("| 3 - RELATORIO            |\n");
    printf("| 4 - SAIR                 |");
    printf("\n+--------------------------+\n\n");
    printf("Escolha: ");
}

// ---------------- FUNCAO PRINCIPAL ---------------- //

int main() {
    setlocale(LC_ALL, "p");

    struct REG_PESSOA lista[TAM];
    inicializarLista(lista);

    int opcao;

    do {
        menu();
        scanf("%d", &opcao);
        limpar();

        switch (opcao) {
            case 1:
                cadastro(lista);
                break;
            case 2:
                excluirPessoa(lista);
                break;
            case 3:
                relatorio(lista);
                break;
            case 4:
                printf("Encerrando programa...\n");
                break;
            default:
                printf("Opcao invalida! Tente novamente.\n");
        }

    } while (opcao != 4);

    return 0;
}
